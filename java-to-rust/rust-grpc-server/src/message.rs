// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `message.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.UUIDEntity)
pub struct UUIDEntity {
    // message fields
    // @@protoc_insertion_point(field:message.UUIDEntity.value)
    pub value: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:message.UUIDEntity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a UUIDEntity {
    fn default() -> &'a UUIDEntity {
        <UUIDEntity as ::protobuf::Message>::default_instance()
    }
}

impl UUIDEntity {
    pub fn new() -> UUIDEntity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &UUIDEntity| { &m.value },
            |m: &mut UUIDEntity| { &mut m.value },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<UUIDEntity>(
            "UUIDEntity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for UUIDEntity {
    const NAME: &'static str = "UUIDEntity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.value = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.value.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.value);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.value.is_empty() {
            os.write_string(1, &self.value)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> UUIDEntity {
        UUIDEntity::new()
    }

    fn clear(&mut self) {
        self.value.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static UUIDEntity {
        static instance: UUIDEntity = UUIDEntity {
            value: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for UUIDEntity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("UUIDEntity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for UUIDEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UUIDEntity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.GenerateUUIDRequest)
pub struct GenerateUUIDRequest {
    // special fields
    // @@protoc_insertion_point(special_field:message.GenerateUUIDRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GenerateUUIDRequest {
    fn default() -> &'a GenerateUUIDRequest {
        <GenerateUUIDRequest as ::protobuf::Message>::default_instance()
    }
}

impl GenerateUUIDRequest {
    pub fn new() -> GenerateUUIDRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GenerateUUIDRequest>(
            "GenerateUUIDRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GenerateUUIDRequest {
    const NAME: &'static str = "GenerateUUIDRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GenerateUUIDRequest {
        GenerateUUIDRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GenerateUUIDRequest {
        static instance: GenerateUUIDRequest = GenerateUUIDRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GenerateUUIDRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GenerateUUIDRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GenerateUUIDRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GenerateUUIDRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.MessageEntity)
pub struct MessageEntity {
    // message fields
    // @@protoc_insertion_point(field:message.MessageEntity.id)
    pub id: ::protobuf::MessageField<UUIDEntity>,
    // @@protoc_insertion_point(field:message.MessageEntity.message)
    pub message: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:message.MessageEntity.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageEntity {
    fn default() -> &'a MessageEntity {
        <MessageEntity as ::protobuf::Message>::default_instance()
    }
}

impl MessageEntity {
    pub fn new() -> MessageEntity {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UUIDEntity>(
            "id",
            |m: &MessageEntity| { &m.id },
            |m: &mut MessageEntity| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &MessageEntity| { &m.message },
            |m: &mut MessageEntity| { &mut m.message },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageEntity>(
            "MessageEntity",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageEntity {
    const NAME: &'static str = "MessageEntity";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageEntity {
        MessageEntity::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.message.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageEntity {
        static instance: MessageEntity = MessageEntity {
            id: ::protobuf::MessageField::none(),
            message: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageEntity {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageEntity").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageEntity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageEntity {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.GetMessageRequest)
pub struct GetMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:message.GetMessageRequest.id)
    pub id: ::protobuf::MessageField<UUIDEntity>,
    // special fields
    // @@protoc_insertion_point(special_field:message.GetMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMessageRequest {
    fn default() -> &'a GetMessageRequest {
        <GetMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMessageRequest {
    pub fn new() -> GetMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UUIDEntity>(
            "id",
            |m: &GetMessageRequest| { &m.id },
            |m: &mut GetMessageRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMessageRequest>(
            "GetMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMessageRequest {
    const NAME: &'static str = "GetMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMessageRequest {
        GetMessageRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMessageRequest {
        static instance: GetMessageRequest = GetMessageRequest {
            id: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.GetMessagesRequest)
pub struct GetMessagesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:message.GetMessagesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a GetMessagesRequest {
    fn default() -> &'a GetMessagesRequest {
        <GetMessagesRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMessagesRequest {
    pub fn new() -> GetMessagesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<GetMessagesRequest>(
            "GetMessagesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for GetMessagesRequest {
    const NAME: &'static str = "GetMessagesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> GetMessagesRequest {
        GetMessagesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static GetMessagesRequest {
        static instance: GetMessagesRequest = GetMessagesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for GetMessagesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("GetMessagesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for GetMessagesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMessagesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.DeleteMessagesRequest)
pub struct DeleteMessagesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:message.DeleteMessagesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteMessagesRequest {
    fn default() -> &'a DeleteMessagesRequest {
        <DeleteMessagesRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessagesRequest {
    pub fn new() -> DeleteMessagesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteMessagesRequest>(
            "DeleteMessagesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteMessagesRequest {
    const NAME: &'static str = "DeleteMessagesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteMessagesRequest {
        DeleteMessagesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteMessagesRequest {
        static instance: DeleteMessagesRequest = DeleteMessagesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteMessagesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteMessagesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteMessagesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessagesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.DeleteMessageRequest)
pub struct DeleteMessageRequest {
    // message fields
    // @@protoc_insertion_point(field:message.DeleteMessageRequest.id)
    pub id: ::protobuf::MessageField<UUIDEntity>,
    // special fields
    // @@protoc_insertion_point(special_field:message.DeleteMessageRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteMessageRequest {
    fn default() -> &'a DeleteMessageRequest {
        <DeleteMessageRequest as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessageRequest {
    pub fn new() -> DeleteMessageRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, UUIDEntity>(
            "id",
            |m: &DeleteMessageRequest| { &m.id },
            |m: &mut DeleteMessageRequest| { &mut m.id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteMessageRequest>(
            "DeleteMessageRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteMessageRequest {
    const NAME: &'static str = "DeleteMessageRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.id)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteMessageRequest {
        DeleteMessageRequest::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteMessageRequest {
        static instance: DeleteMessageRequest = DeleteMessageRequest {
            id: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteMessageRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteMessageRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteMessageRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessageRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.CountMessagesRequest)
pub struct CountMessagesRequest {
    // special fields
    // @@protoc_insertion_point(special_field:message.CountMessagesRequest.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a CountMessagesRequest {
    fn default() -> &'a CountMessagesRequest {
        <CountMessagesRequest as ::protobuf::Message>::default_instance()
    }
}

impl CountMessagesRequest {
    pub fn new() -> CountMessagesRequest {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<CountMessagesRequest>(
            "CountMessagesRequest",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for CountMessagesRequest {
    const NAME: &'static str = "CountMessagesRequest";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> CountMessagesRequest {
        CountMessagesRequest::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static CountMessagesRequest {
        static instance: CountMessagesRequest = CountMessagesRequest {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for CountMessagesRequest {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("CountMessagesRequest").unwrap()).clone()
    }
}

impl ::std::fmt::Display for CountMessagesRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CountMessagesRequest {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.MessageCount)
pub struct MessageCount {
    // message fields
    // @@protoc_insertion_point(field:message.MessageCount.count)
    pub count: i64,
    // special fields
    // @@protoc_insertion_point(special_field:message.MessageCount.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessageCount {
    fn default() -> &'a MessageCount {
        <MessageCount as ::protobuf::Message>::default_instance()
    }
}

impl MessageCount {
    pub fn new() -> MessageCount {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "count",
            |m: &MessageCount| { &m.count },
            |m: &mut MessageCount| { &mut m.count },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessageCount>(
            "MessageCount",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessageCount {
    const NAME: &'static str = "MessageCount";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.count = is.read_int64()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.count != 0 {
            my_size += ::protobuf::rt::int64_size(1, self.count);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.count != 0 {
            os.write_int64(1, self.count)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessageCount {
        MessageCount::new()
    }

    fn clear(&mut self) {
        self.count = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessageCount {
        static instance: MessageCount = MessageCount {
            count: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessageCount {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessageCount").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessageCount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessageCount {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.DeleteMessagesResponse)
pub struct DeleteMessagesResponse {
    // special fields
    // @@protoc_insertion_point(special_field:message.DeleteMessagesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a DeleteMessagesResponse {
    fn default() -> &'a DeleteMessagesResponse {
        <DeleteMessagesResponse as ::protobuf::Message>::default_instance()
    }
}

impl DeleteMessagesResponse {
    pub fn new() -> DeleteMessagesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(0);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<DeleteMessagesResponse>(
            "DeleteMessagesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for DeleteMessagesResponse {
    const NAME: &'static str = "DeleteMessagesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> DeleteMessagesResponse {
        DeleteMessagesResponse::new()
    }

    fn clear(&mut self) {
        self.special_fields.clear();
    }

    fn default_instance() -> &'static DeleteMessagesResponse {
        static instance: DeleteMessagesResponse = DeleteMessagesResponse {
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for DeleteMessagesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("DeleteMessagesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for DeleteMessagesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DeleteMessagesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:message.MessagesResponse)
pub struct MessagesResponse {
    // message fields
    // @@protoc_insertion_point(field:message.MessagesResponse.messages)
    pub messages: ::std::vec::Vec<MessageEntity>,
    // special fields
    // @@protoc_insertion_point(special_field:message.MessagesResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MessagesResponse {
    fn default() -> &'a MessagesResponse {
        <MessagesResponse as ::protobuf::Message>::default_instance()
    }
}

impl MessagesResponse {
    pub fn new() -> MessagesResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "messages",
            |m: &MessagesResponse| { &m.messages },
            |m: &mut MessagesResponse| { &mut m.messages },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MessagesResponse>(
            "MessagesResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MessagesResponse {
    const NAME: &'static str = "MessagesResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.messages.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.messages {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.messages {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MessagesResponse {
        MessagesResponse::new()
    }

    fn clear(&mut self) {
        self.messages.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MessagesResponse {
        static instance: MessagesResponse = MessagesResponse {
            messages: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MessagesResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MessagesResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MessagesResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MessagesResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rmessage.proto\x12\x07message\"\"\n\nUUIDEntity\x12\x14\n\x05value\
    \x18\x01\x20\x01(\tR\x05value\"\x15\n\x13GenerateUUIDRequest\"N\n\rMessa\
    geEntity\x12#\n\x02id\x18\x01\x20\x01(\x0b2\x13.message.UUIDEntityR\x02i\
    d\x12\x18\n\x07message\x18\x02\x20\x01(\tR\x07message\"8\n\x11GetMessage\
    Request\x12#\n\x02id\x18\x01\x20\x01(\x0b2\x13.message.UUIDEntityR\x02id\
    \"\x14\n\x12GetMessagesRequest\"\x17\n\x15DeleteMessagesRequest\";\n\x14\
    DeleteMessageRequest\x12#\n\x02id\x18\x01\x20\x01(\x0b2\x13.message.UUID\
    EntityR\x02id\"\x16\n\x14CountMessagesRequest\"$\n\x0cMessageCount\x12\
    \x14\n\x05count\x18\x01\x20\x01(\x03R\x05count\"\x18\n\x16DeleteMessages\
    Response\"F\n\x10MessagesResponse\x122\n\x08messages\x18\x01\x20\x03(\
    \x0b2\x16.message.MessageEntityR\x08messages2T\n\rUUIDGenerator\x12C\n\
    \x0cGenerateUUID\x12\x1c.message.GenerateUUIDRequest\x1a\x13.message.UUI\
    DEntity\"\02\xc1\x03\n\tMessenger\x12B\n\nGetMessage\x12\x1a.message.Get\
    MessageRequest\x1a\x16.message.MessageEntity\"\0\x12H\n\x0cListMessages\
    \x12\x1b.message.GetMessagesRequest\x1a\x19.message.MessagesResponse\"\0\
    \x12>\n\nPutMessage\x12\x16.message.MessageEntity\x1a\x16.message.Messag\
    eEntity\"\0\x12H\n\rDeleteMessage\x12\x1d.message.DeleteMessageRequest\
    \x1a\x16.message.MessageEntity\"\0\x12S\n\x0eDeleteMessages\x12\x1e.mess\
    age.DeleteMessagesRequest\x1a\x1f.message.DeleteMessagesResponse\"\0\x12\
    G\n\rCountMessages\x12\x1d.message.CountMessagesRequest\x1a\x15.message.\
    MessageCount\"\0B4\n\x1ccom.github.poad.example.grpcB\x0cMessageProtoP\
    \x01\xa2\x02\x03MSGJ\xb7\t\n\x06\x12\x04\0\0C\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0\"\n\t\n\x02\x08\n\x12\x03\x02\
    \0\"\n\x08\n\x01\x08\x12\x03\x03\05\n\t\n\x02\x08\x01\x12\x03\x03\05\n\
    \x08\n\x01\x08\x12\x03\x04\0-\n\t\n\x02\x08\x08\x12\x03\x04\0-\n\x08\n\
    \x01\x08\x12\x03\x05\0!\n\t\n\x02\x08$\x12\x03\x05\0!\n\x08\n\x01\x02\
    \x12\x03\x07\0\x10\n\n\n\x02\x04\0\x12\x04\t\0\x0b\x01\n\n\n\x03\x04\0\
    \x01\x12\x03\t\x08\x12\n\x0b\n\x04\x04\0\x02\0\x12\x03\n\x04\x15\n\x0c\n\
    \x05\x04\0\x02\0\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \n\x0b\x10\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\n\x13\x14\n\n\n\x02\x04\
    \x01\x12\x04\r\0\x0f\x01\n\n\n\x03\x04\x01\x01\x12\x03\r\x08\x1b\n\n\n\
    \x02\x04\x02\x12\x04\x11\0\x14\x01\n\n\n\x03\x04\x02\x01\x12\x03\x11\x08\
    \x15\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x12\x04\x16\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x12\x04\x0e\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x12\
    \x0f\x11\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x12\x14\x15\n\x0b\n\x04\
    \x04\x02\x02\x01\x12\x03\x13\x04\x17\n\x0c\n\x05\x04\x02\x02\x01\x05\x12\
    \x03\x13\x04\n\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x13\x0b\x12\n\x0c\
    \n\x05\x04\x02\x02\x01\x03\x12\x03\x13\x15\x16\n\n\n\x02\x04\x03\x12\x04\
    \x16\0\x18\x01\n\n\n\x03\x04\x03\x01\x12\x03\x16\x08\x19\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x17\x04\x16\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x17\
    \x04\x0e\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x17\x0f\x11\n\x0c\n\x05\
    \x04\x03\x02\0\x03\x12\x03\x17\x14\x15\n\n\n\x02\x04\x04\x12\x04\x1a\0\
    \x1c\x01\n\n\n\x03\x04\x04\x01\x12\x03\x1a\x08\x1a\n\n\n\x02\x04\x05\x12\
    \x04\x1e\0\x1f\x01\n\n\n\x03\x04\x05\x01\x12\x03\x1e\x08\x1d\n\n\n\x02\
    \x04\x06\x12\x04!\0#\x01\n\n\n\x03\x04\x06\x01\x12\x03!\x08\x1c\n\x0b\n\
    \x04\x04\x06\x02\0\x12\x03\"\x04\x16\n\x0c\n\x05\x04\x06\x02\0\x06\x12\
    \x03\"\x04\x0e\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03\"\x0f\x11\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x03\"\x14\x15\n\n\n\x02\x04\x07\x12\x04%\0'\
    \x01\n\n\n\x03\x04\x07\x01\x12\x03%\x08\x1c\n\n\n\x02\x04\x08\x12\x04)\0\
    +\x01\n\n\n\x03\x04\x08\x01\x12\x03)\x08\x14\n\x0b\n\x04\x04\x08\x02\0\
    \x12\x03*\x04\x14\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03*\x04\t\n\x0c\n\
    \x05\x04\x08\x02\0\x01\x12\x03*\n\x0f\n\x0c\n\x05\x04\x08\x02\0\x03\x12\
    \x03*\x12\x13\n\t\n\x02\x04\t\x12\x03-\0!\n\n\n\x03\x04\t\x01\x12\x03-\
    \x08\x1e\n\n\n\x02\x04\n\x12\x04/\01\x01\n\n\n\x03\x04\n\x01\x12\x03/\
    \x08\x18\n\x0b\n\x04\x04\n\x02\0\x12\x030\x04(\n\x0c\n\x05\x04\n\x02\0\
    \x04\x12\x030\x04\x0c\n\x0c\n\x05\x04\n\x02\0\x06\x12\x030\r\x1a\n\x0c\n\
    \x05\x04\n\x02\0\x01\x12\x030\x1b#\n\x0c\n\x05\x04\n\x02\0\x03\x12\x030&\
    '\n\n\n\x02\x06\0\x12\x043\05\x01\n\n\n\x03\x06\0\x01\x12\x033\x08\x15\n\
    \x0b\n\x04\x06\0\x02\0\x12\x034\x04A\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    4\x08\x14\n\x0c\n\x05\x06\0\x02\0\x02\x12\x034\x15(\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x0343=\n\n\n\x02\x06\x01\x12\x047\0C\x01\n\n\n\x03\x06\
    \x01\x01\x12\x037\x08\x11\n\x0b\n\x04\x06\x01\x02\0\x12\x038\x04@\n\x0c\
    \n\x05\x06\x01\x02\0\x01\x12\x038\x08\x12\n\x0c\n\x05\x06\x01\x02\0\x02\
    \x12\x038\x13$\n\x0c\n\x05\x06\x01\x02\0\x03\x12\x038/<\n\x0b\n\x04\x06\
    \x01\x02\x01\x12\x03:\x04F\n\x0c\n\x05\x06\x01\x02\x01\x01\x12\x03:\x08\
    \x14\n\x0c\n\x05\x06\x01\x02\x01\x02\x12\x03:\x15'\n\x0c\n\x05\x06\x01\
    \x02\x01\x03\x12\x03:2B\n\x0b\n\x04\x06\x01\x02\x02\x12\x03<\x04<\n\x0c\
    \n\x05\x06\x01\x02\x02\x01\x12\x03<\x08\x12\n\x0c\n\x05\x06\x01\x02\x02\
    \x02\x12\x03<\x13\x20\n\x0c\n\x05\x06\x01\x02\x02\x03\x12\x03<+8\n\x0b\n\
    \x04\x06\x01\x02\x03\x12\x03>\x04F\n\x0c\n\x05\x06\x01\x02\x03\x01\x12\
    \x03>\x08\x15\n\x0c\n\x05\x06\x01\x02\x03\x02\x12\x03>\x16*\n\x0c\n\x05\
    \x06\x01\x02\x03\x03\x12\x03>5B\n\x0b\n\x04\x06\x01\x02\x04\x12\x03@\x04\
    Q\n\x0c\n\x05\x06\x01\x02\x04\x01\x12\x03@\x08\x16\n\x0c\n\x05\x06\x01\
    \x02\x04\x02\x12\x03@\x17,\n\x0c\n\x05\x06\x01\x02\x04\x03\x12\x03@7M\n\
    \x0b\n\x04\x06\x01\x02\x05\x12\x03B\x04E\n\x0c\n\x05\x06\x01\x02\x05\x01\
    \x12\x03B\x08\x15\n\x0c\n\x05\x06\x01\x02\x05\x02\x12\x03B\x16*\n\x0c\n\
    \x05\x06\x01\x02\x05\x03\x12\x03B5Ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(11);
            messages.push(UUIDEntity::generated_message_descriptor_data());
            messages.push(GenerateUUIDRequest::generated_message_descriptor_data());
            messages.push(MessageEntity::generated_message_descriptor_data());
            messages.push(GetMessageRequest::generated_message_descriptor_data());
            messages.push(GetMessagesRequest::generated_message_descriptor_data());
            messages.push(DeleteMessagesRequest::generated_message_descriptor_data());
            messages.push(DeleteMessageRequest::generated_message_descriptor_data());
            messages.push(CountMessagesRequest::generated_message_descriptor_data());
            messages.push(MessageCount::generated_message_descriptor_data());
            messages.push(DeleteMessagesResponse::generated_message_descriptor_data());
            messages.push(MessagesResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
