name: Build test

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

  workflow_dispatch:

jobs:
  latest_versions:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      llvm_version: ${{ steps.llvm.outputs.version }}
    steps:
    - name: prepare
      run: |
        sudo apt-get update -qq && \
        sudo apt-get install --no-install-recommends -qqy \
          jq
    - name: find latest vrersions (llvm)
      id: llvm
      run: |
        LLVM_VERSION="$(curl -sSL https://api.github.com/repos/llvm/llvm-project/releases/latest | jq -r .tag_name | cut -d'-' -f2)" && \
        echo "version=${LLVM_VERSION}" >> $GITHUB_OUTPUT

  build-java11:
    runs-on: ubuntu-latest
    container: 
      image: poad/docker-grpc:compose-java11
      options: --privileged
    strategy:
      matrix:
        targets: [
          {
            dir: 'elixir-to-java',
            pre: 'cd elixir-to-java && cd elixir_api_server && mix local.hex --force && mix local.hex --force && mix escript.install hex --force protobuf && cd ../..',
            gen: [
              'protoc --elixir_out=plugins=grpc:./elixir_api_server/lib --java_out=./java-grpc-elixir-server/src/main/java --proto_path=./proto message.proto',
              'protoc --elixir_out=plugins=grpc:./elixir_api_server/lib --java_out=./java-grpc-elixir-server/src/main/java --proto_path=./proto hello.proto'
            ],
            build: [ 'cd java-grpc-elixir-server && echo "" && echo Building Java Application && ./gradlew bootBuildImage', 'docker-compose build' ]
          },
          {
            dir: 'java-to-elixir',
            pre: 'cd java-to-elixir && cd grpc_server && mix local.hex --force && mix escript.install hex --force protobuf && cd ../..',
            gen: [
              'protoc --elixir_out=plugins=grpc:./grpc_server/lib --java_out=./elixir-grpc-java/src/main/java --proto_path=./proto message.proto',
              'protoc --elixir_out=plugins=grpc:./grpc_server/lib --java_out=./elixir-grpc-java/src/main/java --proto_path=./proto hello.proto'
            ],
            build: [ 'cd elixir-grpc-java && echo "" && echo Building Java Application && ./gradlew bootBuildImage', 'docker-compose build' ]
          },
          {
            dir: 'java-to-java',
            pre: 'echo ""',
            gen: [
              'protoc --java_out=./java-api-server/src/main/java --java_out=./java-grpc-server/src/main/java --proto_path=./proto message.proto',
              'protoc --java_out=./java-api-server/src/main/java --java_out=./java-grpc-server/src/main/java --proto_path=./proto hello.proto'
            ],
            build: [ 'cd java-api-server && ./gradlew bootBuildImage', 'cd java-grpc-server && ./gradlew bootBuildImage' ]
          },
          {
            dir: 'java-to-rust',
            pre: 'echo ""',
            gen: [
              'protoc --java_out=./java-grpc-example/src/main/java --proto_path=./rust-grpc-server/src/proto message.proto',
              'protoc --java_out=./java-grpc-example/src/main/java --proto_path=./rust-grpc-server/src/proto hello.proto'
            ],
            build: [ 'cd java-grpc-example && echo "" && echo Building Java Application && ./gradlew bootBuildImage', 'docker-compose build' ]
          },
          {
            dir: 'micronaut-to-springboot',
            pre: 'echo ""',
            gen: [
              'protoc --java_out=./micronaut-grpc-api/src/main/java --java_out=./java-micronaut-grpc-server/src/main/java --proto_path=./proto message.proto',
              'protoc --java_out=./micronaut-grpc-api/src/main/java --java_out=./java-micronaut-grpc-server/src/main/java --proto_path=./proto hello.proto'
            ],
            build: [ 'cd java-micronaut-grpc-server && echo "" && echo Building Java Application && ./gradlew bootBuildImage', 'echo "" && docker-compose build' ]
          },
          {
            dir: 'rust-to-elixir',
            pre: 'cd rust-to-elixir && cd grpc_server && mix local.hex --force && mix escript.install hex --force protobuf && cd ../..',
            gen: [
              'protoc --rust_out=./rust-api-server/src/ --grpc_out=./rust-api-server/src/ --plugin=protoc-gen-grpc=$(which grpc_rust_plugin) --elixir_out=plugins=grpc:./grpc_server/lib --proto_path=./rust-api-server/src/proto message.proto',
              'protoc --rust_out=./rust-api-server/src/ --grpc_out=./rust-api-server/src/ --plugin=protoc-gen-grpc=$(which grpc_rust_plugin) --elixir_out=plugins=grpc:./grpc_server/lib --proto_path=./rust-api-server/src/proto hello.proto'
            ],
            build: [ 'docker-compose build', 'echo ""' ]
          }
        ]
    steps:
    - uses: actions/checkout@v3
    - env:
        LLVM_VERSION: ${{needs.latest_versions.outputs.llvm_version}}
      run: |
        CUR=$(pwd) && \
        ${{ matrix.targets.pre }} && \
        cd ${{ matrix.targets.dir }} && \
        ${{ matrix.targets.gen[0] }} && \
        ${{ matrix.targets.gen[1] }} && \
        ${{ matrix.targets.build[0] }} && \
        cd .. && \
        ${{ matrix.targets.build[1] }} && \
        cd ${CUR}

  configure:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor != 'dependabot[bot]'
    steps:
    - name: Pull request auto merge enabler
      uses: poad/github-pull-request-auto-merge-enable-action@v1.0.2
      with:
        pull_request_id: ${{ github.event.pull_request.node_id }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository: ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: SQUASH
